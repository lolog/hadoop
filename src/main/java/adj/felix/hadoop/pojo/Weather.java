/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package adj.felix.hadoop.pojo;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Weather\",\"namespace\":\"adj.felix.hadoop.pojo\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"month\",\"type\":\"int\"},{\"name\":\"day\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int year;
  @Deprecated public int month;
  @Deprecated public int day;
  @Deprecated public int temperature;

  /**
   * Default constructor.
   */
  public Weather() {}

  /**
   * All-args constructor.
   */
  public Weather(java.lang.Integer year, java.lang.Integer month, java.lang.Integer day, java.lang.Integer temperature) {
    this.year = year;
    this.month = month;
    this.day = day;
    this.temperature = temperature;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return month;
    case 2: return day;
    case 3: return temperature;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Integer)value$; break;
    case 1: month = (java.lang.Integer)value$; break;
    case 2: day = (java.lang.Integer)value$; break;
    case 3: temperature = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'month' field.
   */
  public java.lang.Integer getMonth() {
    return month;
  }

  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.Integer value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'day' field.
   */
  public java.lang.Integer getDay() {
    return day;
  }

  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.Integer value) {
    this.day = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   */
  public java.lang.Integer getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.Integer value) {
    this.temperature = value;
  }

  /** Creates a new Weather RecordBuilder */
  public static adj.felix.hadoop.pojo.Weather.Builder newBuilder() {
    return new adj.felix.hadoop.pojo.Weather.Builder();
  }
  
  /** Creates a new Weather RecordBuilder by copying an existing Builder */
  public static adj.felix.hadoop.pojo.Weather.Builder newBuilder(adj.felix.hadoop.pojo.Weather.Builder other) {
    return new adj.felix.hadoop.pojo.Weather.Builder(other);
  }
  
  /** Creates a new Weather RecordBuilder by copying an existing Weather instance */
  public static adj.felix.hadoop.pojo.Weather.Builder newBuilder(adj.felix.hadoop.pojo.Weather other) {
    return new adj.felix.hadoop.pojo.Weather.Builder(other);
  }
  
  /**
   * RecordBuilder for Weather instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Weather>
    implements org.apache.avro.data.RecordBuilder<Weather> {

    private int year;
    private int month;
    private int day;
    private int temperature;

    /** Creates a new Builder */
    private Builder() {
      super(adj.felix.hadoop.pojo.Weather.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(adj.felix.hadoop.pojo.Weather.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Weather instance */
    private Builder(adj.felix.hadoop.pojo.Weather other) {
            super(adj.felix.hadoop.pojo.Weather.SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.month)) {
        this.month = data().deepCopy(fields()[1].schema(), other.month);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.day)) {
        this.day = data().deepCopy(fields()[2].schema(), other.day);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.temperature)) {
        this.temperature = data().deepCopy(fields()[3].schema(), other.temperature);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'year' field */
    public java.lang.Integer getYear() {
      return year;
    }
    
    /** Sets the value of the 'year' field */
    public adj.felix.hadoop.pojo.Weather.Builder setYear(int value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'year' field has been set */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'year' field */
    public adj.felix.hadoop.pojo.Weather.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'month' field */
    public java.lang.Integer getMonth() {
      return month;
    }
    
    /** Sets the value of the 'month' field */
    public adj.felix.hadoop.pojo.Weather.Builder setMonth(int value) {
      validate(fields()[1], value);
      this.month = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'month' field has been set */
    public boolean hasMonth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'month' field */
    public adj.felix.hadoop.pojo.Weather.Builder clearMonth() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'day' field */
    public java.lang.Integer getDay() {
      return day;
    }
    
    /** Sets the value of the 'day' field */
    public adj.felix.hadoop.pojo.Weather.Builder setDay(int value) {
      validate(fields()[2], value);
      this.day = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'day' field has been set */
    public boolean hasDay() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'day' field */
    public adj.felix.hadoop.pojo.Weather.Builder clearDay() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'temperature' field */
    public java.lang.Integer getTemperature() {
      return temperature;
    }
    
    /** Sets the value of the 'temperature' field */
    public adj.felix.hadoop.pojo.Weather.Builder setTemperature(int value) {
      validate(fields()[3], value);
      this.temperature = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'temperature' field has been set */
    public boolean hasTemperature() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'temperature' field */
    public adj.felix.hadoop.pojo.Weather.Builder clearTemperature() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Weather build() {
      try {
        Weather record = new Weather();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Integer) defaultValue(fields()[0]);
        record.month = fieldSetFlags()[1] ? this.month : (java.lang.Integer) defaultValue(fields()[1]);
        record.day = fieldSetFlags()[2] ? this.day : (java.lang.Integer) defaultValue(fields()[2]);
        record.temperature = fieldSetFlags()[3] ? this.temperature : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
